package com.dc.nettyclient;


import java.util.concurrent.TimeUnit;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import com.dc.nettyclient.pojo.MessageId;
import com.dc.nettyclient.pojo.MessageRegister;
import com.dc.rpc.common.connection.ConnectionManager;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInboundHandlerAdapter;
import io.netty.channel.EventLoop;

public class ProtoClientHandler extends ChannelInboundHandlerAdapter {

	private Client client;

	public ProtoClientHandler(Client client) {
		this.client = client;
	}

	private Logger log = Logger.getLogger(this.getClass());

	@Override
	public void channelInactive(ChannelHandlerContext ctx) throws Exception {
		final EventLoop eventLoop = ctx.channel().eventLoop();
		log.error("server disconnect=====");

		// 重新连接服务器
		ctx.channel().eventLoop().schedule(new Runnable() {
			public void run() {
				client.connect(new Bootstrap(), eventLoop);
			}
		}, 2, TimeUnit.SECONDS);
		super.channelInactive(ctx);
	}

	@Override
	public void channelActive(ChannelHandlerContext ctx) {
		log.info("channel active");
		com.dc.rpc.common.connection.Connection connection = ConnectionManager.getInstance().createConnection(ctx.channel());
		MessageRegister.Register.Builder builder = MessageRegister.Register.newBuilder();
		builder.setKey("123333333");
		com.dc.rpc.common.packages.Package pack = new com.dc.rpc.common.packages.Package(
				MessageId.CLIENT_TO_SERVER_REGISTER, builder.build());
		connection.send(pack, null);

	}

	@Override
	public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
		// super.channelReadComplete(ctx);
		ctx.flush();
	}

	@Override
	public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
		log.log(Level.INFO, "channelRead");
		com.dc.rpc.common.packages.Package pack = (com.gc.rpc.packages.Package) msg;
		log.log(Level.INFO, "messageId====" + pack.getMessageId());
		DataHandlerManager.process(pack);
	}

	@Override
	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
		cause.printStackTrace();
		ConnectionManager.getInstance().getConnection(ctx.channel().id()).close();
	}

}
