package com.dc.nettyserver.pojo;



import com.dc.rpc.common.connection.Connection;
import com.dc.rpc.common.connection.ConnectionState;
import com.google.protobuf.InvalidProtocolBufferException;

public abstract class SingleHandler {
	public abstract void register(Connection connection, MessageRegister.Register proto);

	public void process(com.dc.rpc.common.packages.Package pack, Connection connection) {
		MessageResponse.Response.Builder builder = MessageResponse.Response.newBuilder();
		com.dc.rpc.common.packages.Package p = null;
		if (pack.getMessageId() != MessageId.CLIENT_TO_SERVER_REGISTER
				&& !connection.getState().equals(ConnectionState.Login)) {
			if (connection.getState().equals(ConnectionState.Closed)) {
				ConnectionManager.getInstance().remove(connection.getChannel());
				return;
			}
			builder.setRes(0);
			p = new com.gc.rpc.packages.Package(MessageId.SERVER_TO_CLIENT_REGISTER, builder.build());
			connection.send(p, null);
			return;
		}
		switch (pack.getMessageId()) {
		case MessageId.HEATBEAT:
			builder.setRes(1);
			p = new com.gc.rpc.packages.Package(MessageId.HEATBEAT, builder.build());
			connection.send(p, null);
			return;
		case MessageId.SERVER_TO_CLIENT_REGISTER:
			MessageRegister.Register proto1;
			try {
				proto1 = MessageRegister.Register.parseFrom(pack.getBody());
				register(connection, proto1);
			} catch (InvalidProtocolBufferException e) {
				e.printStackTrace();
			}
			return;
		default:
			break;
		}
	}
}